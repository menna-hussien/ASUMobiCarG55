#include<NewPing.h>
const int trigger = 5;
const int echo = 2;
NewPing ultrasonic(trigger, echo);
char data = 0;
int motor1f = 13;
int motor1b = 12;
int motor2f = 11;
int motor2b = 10;
int spd1 = 7;
int spd2 = 6;
//dah ell fe eh sensor aslan
int LS=24;           
int CS=23;
int RS=22;
long duration;
long distance;
char data3=0;
const byte MOTOR_A = 19;  // Motor 2 Interrupt Pin - INT 1 - Right Motor
const byte MOTOR_B = 18;  // Motor 1 Interrupt Pin - INT 0 - Left Motor
// Constant for steps in disk
const float stepcount = 20.00;  // 20 Slots in disk

// Constant for wheel diameter
const float wheeldiameter = 6.40; // Wheel diameter in cms

// Integers for pulse counters
volatile int counter_A = 0;
volatile int counter_B = 0;

//m for distance entered by the user in phase 3
float m = 0.0;
//data2 is for direction entered in phase 3
char data2=0;
// Interrupt Service Routines

// Motor A pulse count ISR
void ISR_countA()  
{
  counter_A++;  // increment Motor A counter value
} 

// Motor B pulse count ISR
void ISR_countB()  
{
  counter_B++;  // increment Motor B counter value
}
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode (motor1f, OUTPUT);
  pinMode (motor1b, OUTPUT);
  pinMode (motor2f, OUTPUT);
  pinMode (motor2b, OUTPUT);
  pinMode (spd1, OUTPUT);
  pinMode (spd2, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(2, INPUT);
  //// Attach the Interrupts to their ISR's
//  attachInterrupt(digitalPinToInterrupt (MOTOR_A), ISR_countA, RISING);  // Increase counter A when speed sensor pin goes High
//  attachInterrupt(digitalPinToInterrupt (MOTOR_B), ISR_countB, RISING);  // Increase counter B when speed sensor pin goes High
//  
}
void loop() {



distance = USReadings();
Serial.print("\nDistance: ");
Serial.println(distance);

if (distance <= 30)
  {
    data= 0;
  }
  

if (Serial.available() > 0)
{
    data = Serial.read();
    }

else 
{

    switch (data)
    {
      case 'F' :
        Serial.println("\nforward");
        forward();                
        break;

      case 'B' :
        Serial.println("\nbackward");
        backward();
        break;

      case 'R' :
        Serial.println("\nright");
        right();
        break;

      case 'L' :
        Serial.println("\nleft");
        left();
        break;

      default:
        Serial.println("\nstop");
        STOP();
        break;
      }
}



/// obstacle avoidance system
 if (distance <= 30)
  {
  right();
  Serial.println("\nrotate right"); 
  delay(500); // equal to ~20Â°
  data = 'F';
  }
else if(data3=='T')
{
  Serial.println("\nLINE TRACKER MODE IS ON");
  while(data3=='T')
{  
 while(digitalRead(RS)==0 && digitalRead(CS)==0 && digitalRead(LS)==0)     //stop //0 white
  {  
   
    Serial.println("\ndata3= ");
    Serial.println(data3);
    Serial.println("\nSTOP");
    STOP();
   data3=Serial.read(); 
   if(data3!='T')
   break; 
   
    Serial.println("STOP");
    STOP();
//    analogWrite (spd1,64);
//    analogWrite (spd2,64);        //128
//
//    digitalWrite (motor2b,LOW);
//    digitalWrite (motor2f,HIGH);
//    digitalWrite (motor1b,HIGH);     
//    digitalWrite (motor1f,LOW);
//
//    if(digitalRead(RS)==0 && digitalRead(CS)==1 && digitalRead(LS)==0)
//     FORWARD();
//    else if(digitalRead(RS)==0 && digitalRead(CS)==0 && digitalRead(LS)==1)
//    {  analogWrite (spd1,64);
//    analogWrite (spd2,64);
//     digitalWrite (motor2b,HIGH);
//        digitalWrite (motor2f,LOW);     
//     digitalWrite (motor1b,LOW);
//      digitalWrite (motor1f,HIGH); 
//    }
//   else if(digitalRead(RS)==1 && digitalRead(CS)==0 && digitalRead(LS)==0)
//   {   analogWrite (spd1,64);
//    analogWrite (spd2,64);        //128
//
//    digitalWrite (motor2b,LOW);
//    digitalWrite (motor2f,HIGH);
//    digitalWrite (motor1b,HIGH);     
//    digitalWrite (motor1f,LOW);
//   }
//  else STOP();
//     
  }
   while(digitalRead(RS)==1 && digitalRead(CS)==0 && digitalRead(LS)==0)     // Move  RIGHT  with slight angle Edite
    {
       RIGHT ( );
     data3=Serial.read(); 
   if(data3!='T')
   break; 
    
  }
    while(digitalRead(RS)==0 && digitalRead(CS)==1 && digitalRead(LS)==0)     // Move Forward with full speed Edited
  {
      FORWARD( );
  data3=Serial.read(); 
   if(data3!='T')
   break; 
    }
     while(digitalRead(RS)==1 && digitalRead(CS)==0 && digitalRead(LS)==1)     // Move Forward with full speed Edited
  {
      FORWARD( );
  data3=Serial.read(); 
   if(data3!='T')
   break; 
    }
    while(digitalRead(RS)==1 && digitalRead(CS)==1 && digitalRead(LS)==0)     // Move Right with greater angle Edited
   {   
    RIGHTHIGH ( );
     data3=Serial.read(); 
   if(data3!='T')
   break; 
  }
  
 while(digitalRead(RS)==0 && digitalRead(CS)==0 && digitalRead(LS)==1)     // Move Left with slight angle edited
  {
    
     LEFT();
     data3=Serial.read(); 
   if(data3!='T')
   break; 
    
  }

  while(digitalRead(RS)==0 && digitalRead(CS)==1 && digitalRead(LS)==1)     // Move left with greater angle edited
  {
    
     LEFTHIGH();
      data3=Serial.read(); 
   if(data3!='T')
   break; 
  }

   while(digitalRead(RS)==1 && digitalRead(CS)==1 && digitalRead(LS)==1)     // forward
  {     STOP ();
   data3=Serial.read(); 
   if(data3!='T')
   break; 
     
  }

}
}
  else if (data3=='A')
{
  
    Serial.println("\nAccurate Mode Is On");
   
   if (data2=='R')
{  
   Serial.println("Please enter angle");
   delay(10000);
   m=Serial.parseInt();
   Serial.println("the angle enetered is ");
   Serial.println(m);
   MoveRight(angle_steps(m) , 128);
  }
   if (data2=='L')
{  
   Serial.println("Please enter angle");
   delay(10000);
   m=Serial.parseInt();
   Serial.println("the angle enetered is ");
   Serial.println(m);
   MoveLeft(angle_steps(m) , 128);
  }
  
  }
  

  
}
void forward()
{
  digitalWrite(motor1f, HIGH);
  digitalWrite(motor1b, LOW);
  digitalWrite(motor2f, HIGH);
  digitalWrite(motor2b, LOW);
  digitalWrite(spd1, HIGH);
  digitalWrite(spd2, HIGH);
}

void right()
{
  digitalWrite(motor1f, HIGH);
  digitalWrite(motor1b, LOW);
  digitalWrite(motor2f, LOW);
  digitalWrite(motor2b, HIGH);
  digitalWrite(spd1, HIGH);
  digitalWrite(spd2, HIGH);
  
}
void left()
{
  digitalWrite (motor1b, HIGH);
  digitalWrite (motor1f, LOW);
  digitalWrite (motor2b, LOW);
  digitalWrite (motor2f, HIGH);
  digitalWrite(spd1, HIGH);
  digitalWrite(spd2, HIGH);
}
void backward()
{
  digitalWrite (motor1b, HIGH);
  digitalWrite (motor1f, LOW);
  digitalWrite (motor2b, HIGH);
  digitalWrite (motor2f, LOW);
  digitalWrite(spd1, HIGH);
  digitalWrite(spd2, HIGH);
}
void STOP()
{
  digitalWrite (motor1b, LOW);
  digitalWrite (motor1f, LOW);
  digitalWrite (motor2b, LOW);
  digitalWrite (motor2f, LOW);
  digitalWrite(spd1, HIGH);
  digitalWrite(spd2, HIGH);
}

long USReadings()
{
  digitalWrite(5,LOW);
  delayMicroseconds(2);
  digitalWrite(5,HIGH);
  delayMicroseconds(10);
  digitalWrite(5,LOW);
  duration = pulseIn(2,HIGH);
  distance= (duration/2)*0.034 ; 
  return distance ;
}
int angle_steps ( int angle) {
int result_angle;
float l_arc = 2*PI*14*angle/360;
 float circumference = (wheeldiameter * PI)/10; // Calculate wheel circumference in cm
  float cm_step = circumference / stepcount;  // CM per Step
  
  float a_result = l_arc / cm_step;  // Calculate result as a float
  result_angle = (int) a_result; // Convert to an integer (note this is NOT rounded)
 
  return result_angle;  // End and return result

}
// Function to Move right in phase 3
void MoveRight(int steps, int mspeed) 
{
   counter_A = 0;  //  reset counter A to zero
   counter_B = 0;  //  reset counter B to zero
   digitalWrite (motor2b,LOW);  //10
     digitalWrite (motor2f,HIGH); //11
     digitalWrite (motor1b,HIGH);  //12 motor A yemeen el robot  
     digitalWrite (motor1f,LOW); //13  motor A uemeen el robot
     
   // Go right until step value is reached
   while (steps > counter_A && steps > counter_B) {
   
    if (steps > counter_A) {
    analogWrite(spd2, mspeed);
    } else {
    analogWrite(spd2, 0);
    }
    if (steps > counter_B) {
    analogWrite(spd1, mspeed);
    } else {
    analogWrite(spd1, 0);
    }
   }
    
  // Stop when done
  analogWrite(spd2, 0);
  analogWrite(spd1, 0);
  counter_A = 0;  //  reset counter A to zero
  counter_B = 0;  //  reset counter B to zero 

}
// Function to Move leftt in phase 3
void MoveLeft(int steps, int mspeed) 
{
   counter_A = 0;  //  reset counter A to zero
   counter_B = 0;  //  reset counter B to zero
   digitalWrite (motor2b,HIGH);  //10
     digitalWrite (motor2f,LOW); //11
     digitalWrite (motor1b,LOW);  //12 motor A yemeen el robot  
     digitalWrite (motor1f,HIGH); //13  motor A uemeen el robot
     
   // Go left until step value is reached
   while (steps > counter_A && steps > counter_B) {
   
    if (steps > counter_A) {
    analogWrite(spd2, mspeed);
    } else {
    analogWrite(spd2, 0);
    }
    if (steps > counter_B) {
    analogWrite(spd1, mspeed);
    } else {
    analogWrite(spd1, 0);
    }
   }
    
  // Stop when done
  analogWrite(spd2, 0);
  analogWrite(spd1, 0);
  counter_A = 0;  //  reset counter A to zero
  counter_B = 0;  //  reset counter B to zero 

}  
